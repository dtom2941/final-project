	My general goal was to make a randomly generated map that the user could edit and then make into a race course so that they could measure the amount of time it takes to go through the course. I have 3 main modes that the user can use. A tutorial mode that allows the user to learn how the program works, while allowing them to do the action they are learning. I had small blocks of text so that the user could learn one action at a time. I also have a Create mode in which the user can fly around and click on the surface to add blocks and poles. I have two buttons so it is easy to switch between the modes. I also keep the helping text in the same place so that the user always knows where to look for what buttons they need. I also allow the user to go out of the bounds of the grid, so that I do not really constrain the user, because it may be annoying for the user to edit and look at their course if they are not able to navigate around easily. For the driving mode, I have the user positioned behind above their car, so they can see what is going on around the car. I also have the poles as the way to create the course, because they are high, and therefore easy to see, and they are easier to edit than walls, so they are easier to put in. I also added a yellow box in the middle of the next series of poles that the user needs to go to, so they know where to go. For the terrain, I created the checkerboard pattern so that it was easier to see where the car is in the terrain. 
	 My EggMaker.py creates egg files by adding lines to a file that it creates. These egg files have a human readable format, so the python file puts everything into the correct format. I make the random generation of terrrain, by creating 2-d list and starting in the center, and randomly moving 1 row or col and adding 1 to the height in that grid until I have added 10000 height to the grid. To know what vertex I need to use, I store the vertex name in a maximum of 6 digits with the first 3 denoting the x value, the second 3 the y value so that I know which vertexes are next to each other. 
	I used Panda3D in order to complete the game.In order to know if the car went through a pair of poles, the main file finds a line between the two poles and finds the x coordinate that is necesary based upon the y coordinate inputed into the equation. I added some acceptable error since the value would never be exact, so that I would be as certain as possible that the program would detect the car going through the poles, without enabling the car to be to far away to activate going through it.
	In order to figure out collision with other objects and the terrain in the forward direction, I have a collision ray pointed forward. In order to make sure that the collsion ray only detects objects other than the car, I decrease the distance that is necesary to show that the car has collided with other objects including the terrain. 
	In order to calculate the z height of car, I first find x and y, then using collision ray to find first thing that is under car, then make car at that height. 
	I use the mouse to get x and y of collsion, then I put an object there. 
	For the text, I have a method to destroy the text, so that they can be written over without having residual text that I have no variable storing, but still is rendered, so it would be impossible to delete if I did not do this. 